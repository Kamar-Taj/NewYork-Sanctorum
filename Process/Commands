Commands:
---------
Following are the commands related to process. The commands are useful to verify  or customize the process.

PS:
It displays information about a selection of the active processes on the system.

root@KamarTaj:/home/krish# ps
  PID TTY          TIME CMD
 2472 pts/1    00:00:00 sudo
 2474 pts/1    00:00:00 su
 2475 pts/1    00:00:00 bash
 2489 pts/1    00:00:00 ps
root@KamarTaj:/home/krish#

Use help to find different options, which can be used with PS. Ex: ax, aux, etc.,
---

Top:
top is a powerful tool that offers you a dynamic real-time view of a running system 

root@KamarTaj:/home/krish# top
top - 20:04:12 up 6 min,  1 user,  load average: 0.41, 0.53, 0.34
Tasks: 159 total,   4 running, 125 sleeping,   0 stopped,   0 zombie
%Cpu(s): 23.8 us,  0.0 sy,  0.0 ni, 76.2 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st
KiB Mem :  2041304 total,   560372 free,   662652 used,   818280 buff/cache
KiB Swap:  2095100 total,  2095100 free,        0 used.  1194520 avail Mem 

  PID USER      PR  NI    VIRT    RES    SHR S %CPU %MEM     TIME+ COMMAND                                                               
 2115 krish     20   0 1247356 176616  79392 S 18.2  8.7   0:41.02 compiz                                                               
  880 root      20   0  429824  86340  34444 R  4.5  4.2   0:10.15 Xorg              
 2802 root      20   0   41800   3696   3100 R  4.5  0.2   0:00.60 top                                                                 
    1 root      20   0  119848   5912   3916 S  0.0  0.3   0:01.93 systemd                                                 
    2 root      20   0       0      0      0 S  0.0  0.0   0:00.00 kthreadd
---

Glances:
glances is a relatively new system monitoring tool with advanced features:
CPU      30.4%  nice:     0.0%  LOAD    1-core                 MEM     35.6%  active:    1002M                 SWAP      0.0%
user:    24.6%  irq:      0.0%  1 min:    0.26                 total:  1.95G  inactive:   436M                 total:   2.00G
system:   4.5%  iowait:   1.3%  5 min:    0.36                 used:    711M  buffers:   51.9M                 used:        0
idle:    69.6%  steal:    0.0%  15 min:   0.33                 free:   1.25G  cached:     806M                 free:    2.00G


Sending Signals To Processes:
The fundamental way of controlling processes in Linux is by sending signals to them. 
There are multiple signals that you can send to a process, to view all the signals run:
$ kill -l

And most signals are for internal use by the system, or for programmers when they write code. 
The following are signals which are useful to a system user:

SIGHUP 1 – sent to a process when its controlling terminal is closed.
SIGINT 2 – sent to a process by its controlling terminal when a user interrupts the process by pressing  [Ctrl+C].
SIGQUIT 3 – sent to a process if the user sends a quit signal [Ctrl+D].
SIGKILL 9 – this signal immediately terminates (kills) a process and the process will not perform any clean-up operations.
SIGTERM 15 – this a program termination signal (kill will send this by default).
SIGTSTP 20 – sent to a process by its controlling terminal to request it to stop (terminal stop); 
initiated by the user pressing [Ctrl+z]
---

Changing Linux Process Priority:
On the Linux system, all active processes have a priority and certain nice value. 
Processes with higher priority will normally get more CPU time than lower priority processes.
The nice parameter is used for this purpose. It ranges from minus 20 to plus 19 and can take on only integer values. 
A value of minus 20 represents the highest priority level, whereas 19 represents the lowest. 
The fact that the highest priority level is indicated by the most negative number is somewhat unintuitive; 
however, running at a lower priority is considered "nicer," because it allows other processes to use a bigger share of CPU time.

How to Play Nice
Using the command nice starts a new process (job) and assigns it a priority (nice) value at the same time. 
To change the priority of a process that is already running, use the command renice.

For example, the following command line starts the process "new-Process" setting the nice value to 12:
#nice -12 new-Process
#nice --12 new-Process
#renice 17 -p 1134
#renice -3 -p 1134
---

Running a job in background:
To run a process in background, add a "&" at the end of execution file as shown below.
#./background_process &

By execute in above formate, the process will automatically starts executing in background.
The disadvantage of running a process in background is, the background running process will never wait for user inputs.
---

Foreground and Background (fg or bg):
Normally user can run a job in background, by adding & at end of the command (ex: sleep 10 &).
bg stands for Background. This is a shell command. By using this command we can initiate the process in background.
fd stands for foreground. This is a shell command. By using this command we can run any background process in foreground.
Usage:
* You could suspend long tasks like ping, find, mkfs using Ctrl+Z
* Suspended jobs could seen by #jobs
* To run the job in background #bg %jobNo  eg: bg %2
* To bring a job to foreground #fg %jobNo
* To kill job #kill %jobNo

